#BlueJ class context
comment0.target=TestClassDeclarations
comment0.text=\r\n\ Test\ WeatherComputation\ activity\ 3\ operations.\r\n\ \r\n\ Check\ for\ the\ existance\ and\ type\ of\ each\ field.\r\n\ Check\ for\ the\ existance\ and\ return\ type\ of\ \r\n\ \ \ \ \ \ accessors\ for\ each\ field.\r\n\ Check\ for\ the\ existance\ and\ parameter\ type\ of\r\n\ \ \ \ \ \ mutators\ for\ each\ field.\r\n\ Check\ for\ the\ existance\ of\ a\ noarg\ constructor.\r\n\ Check\ for\ the\ existance\ of\ a\ constructor\ which\r\n\ \ \ \ \ \ sets\ all\ fields\ using\ parameters.\r\n\ Check\ for\ other\ listed\ methods.\r\n\ \ \ \ \ \ \r\n\ DOES\ NOT\ CHECK\ ANY\ FUNCTIONALITY.\r\n\ You\ must\ use\ fully\ qualified\ class\ names\r\n\ such\ as\ java.util.Scanner\r\n\ \r\n\ @author\ Joel\ Swanson\r\n\ @version\ 03.30.2014\r\n
comment1.params=
comment1.target=void\ checkLemonadeStand()
comment1.text=\r\n\ Test\ fields,\ accessors,\ and\ mutators.\r\n
comment10.params=
comment10.target=void\ checkNoParentClass()
comment10.text=\r\n\ Check\ that\ this\ class\ does\ not\ incorrectly\r\n\ extend\ another\ class\ by\ making\ sure\ the\ parent\r\n\ of\ this\ class\ is\ object.\r\n
comment11.params=interfaces
comment11.target=void\ checkParentInterfaces(java.lang.String[])
comment11.text=\r\n\ Check\ for\ proper\ interface\ implementation.\r\n\ @param\ interfaces\ A\ list\ of\ names\ of\ interfaces\r\n\ that\ should\ be\ implemented.\r\n
comment12.params=
comment12.target=void\ checkMain()
comment12.text=\r\n\ Check\ to\ see\ if\ a\ properly\ declared\ main\ exists.\r\n\ public,\ static,\ and\ void\ with\ String[]\ parameter.\r\n
comment13.params=low\ high
comment13.target=void\ checkFieldNumber(int,\ int)
comment13.text=\r\n\ Check\ for\ the\ correct\ number\ of\ fields.\r\n\ @param\ low\ The\ smallest\ number\ of\ fields\ allowed.\r\n\ @param\ high\ The\ largest\ number\ of\ fields\ allowed.\r\n
comment14.params=
comment14.target=void\ checkFields()
comment14.text=\r\n\ Check\ that\ all\ fields\ exist\ as\ named.\r\n\ Check\ that\ all\ fields\ are\ of\ the\ correct\ type.\r\n\ Check\ that\ all\ fields\ are\ private.\r\n
comment15.params=
comment15.target=void\ checkAccessors()
comment15.text=\r\n\ Check\ that\ all\ the\ accessors\ are\ correct.\r\n
comment16.params=
comment16.target=void\ checkMutators()
comment16.text=\r\n\ Check\ that\ all\ the\ mutators\ are\ correct.\r\n
comment17.params=parameters
comment17.target=void\ checkConstructor(java.lang.String[])
comment17.text=\r\n\ Tests\ for\ a\ constructor\ with\ a\ given\ number\ and\r\n\ type\ of\ parameters.\r\n\ \r\n\ @param\ parameters\ A\ variable\ list\ of\ parameter\ types\r\n\ as\ Strings.\ \ Put\ any\ types\ and\ this\ method\ will\r\n\ attempt\ to\ find\ a\ constructor\ with\ those\ types\ in\r\n\ the\ specified\ order.\r\n
comment18.params=testClass
comment18.target=void\ checkNoCopyConstructor(java.lang.Class)
comment18.text=\r\n\ Tests\ that\ a\ copy\ constructor\ was\ not\ created.\r\n\ \r\n\ @param\ testClass\ This\ objects\ class\ type.\ \ A\ copy\ constructor\r\n\ would\ have\ an\ object\ of\ this\ type\ as\ a\ parameter.\r\n
comment19.params=name\ expectedReturn\ parameters
comment19.target=void\ checkMethod(java.lang.String,\ java.lang.String,\ java.lang.String[])
comment19.text=\r\n\ Tests\ for\ a\ constructor\ with\ a\ given\ number\ and\r\n\ type\ of\ parameters.\r\n\ \r\n\ @param\ name\ Search\ for\ a\ method\ with\ this\ name.\r\n\ @param\ expectedReturn\ Expected\ type\ of\ the\ return.\r\n\ @param\ parameters\ A\ variable\ list\ of\ parameter\ types\r\n\ as\ Strings.\ \ Put\ any\ types\ and\ this\ method\ will\r\n\ attempt\ to\ find\ a\ constructor\ with\ those\ types\ in\r\n\ the\ specified\ order.\r\n
comment2.params=
comment2.target=void\ printHeader()
comment2.text=\r\n\ Print\ a\ standard\ header.\ Useful\ if\ testing\ multiple\r\n\ classes\ for\ proper\ declaration.\r\n
comment20.params=name\ expectedReturn\ parameters
comment20.target=void\ checkStaticMethod(java.lang.String,\ java.lang.String,\ java.lang.String[])
comment20.text=\r\n\ Tests\ for\ a\ constructor\ with\ a\ given\ number\ and\r\n\ type\ of\ parameters.\ \ Ensures\ it\ is\ static.\r\n\ \r\n\ @param\ name\ Search\ for\ a\ method\ with\ this\ name.\r\n\ @param\ expectedReturn\ Expected\ type\ of\ the\ return.\r\n\ @param\ parameters\ A\ variable\ list\ of\ parameter\ types\r\n\ as\ Strings.\ \ Put\ any\ types\ and\ this\ method\ will\r\n\ attempt\ to\ find\ a\ constructor\ with\ those\ types\ in\r\n\ the\ specified\ order.\r\n
comment21.params=name\ expectedReturn\ parameters
comment21.target=void\ checkAbstractMethod(java.lang.String,\ java.lang.String,\ java.lang.String[])
comment21.text=\r\n\ Tests\ for\ a\ constructor\ with\ a\ given\ number\ and\r\n\ type\ of\ parameters.\ \ Ensures\ it\ is\ abstract.\r\n\ \r\n\ @param\ name\ Search\ for\ a\ method\ with\ this\ name.\r\n\ @param\ expectedReturn\ Expected\ type\ of\ the\ return.\r\n\ @param\ parameters\ A\ variable\ list\ of\ parameter\ types\r\n\ as\ Strings.\ \ Put\ any\ types\ and\ this\ method\ will\r\n\ attempt\ to\ find\ a\ constructor\ with\ those\ types\ in\r\n\ the\ specified\ order.\r\n
comment22.params=parameters
comment22.target=java.lang.String\ getParameterList(java.lang.String[])
comment22.text=\r\n\ Return\ the\ parameters\ as\ a\ comma\ separated\ list\r\n\ or\ return\ none.\r\n\ \r\n\ @param\ parameters\ List\ of\ parameter\ types\ as\ strings.\r\n\ \r\n\ @return\ Returns\ all\ parameters\ as\ a\ single\ comma\r\n\ separated\ list.\r\n
comment23.params=parameters
comment23.target=java.lang.Class[]\ getTypeClassArray(java.lang.String[])
comment23.text=\r\n\ Turn\ a\ string\ array\ of\ types\ into\ an\ array\ of\ Class\ types.\r\n\ \r\n\ @param\ parameters\ A\ list\ of\ parameter\ types\ as\ Strings.\r\n\ \r\n\ @return\ Returns\ an\ array\ of\ Class\ objects\ based\ on\ the\r\n\ parameter\ list\ which\ are\ String\ objects.\r\n
comment24.params=name\ expectedType
comment24.target=void\ checkOneField(java.lang.String,\ java.lang.String)
comment24.text=\r\n\ Test\ class\ for\ a\ specific\ field\ name\ and\ correct\ type.\r\n\ \r\n\ @param\ name\ Make\ sure\ Chalk\ has\ a\ field\ of\ this\ name.\r\n\ @param\ expectedType\ Make\ sure\ the\ name\ field\ has\ this\ type.\r\n
comment25.params=name\ expectedType
comment25.target=void\ checkOneAccessor(java.lang.String,\ java.lang.String)
comment25.text=\r\n\ Test\ class\ for\ a\ specific\ accessor\ for\ existance\ and\ type.\r\n\ @param\ name\ The\ expected\ name\ of\ the\ accessor.\r\n\ @param\ expectedType\ The\ expected\ return\ type\ of\ the\ accessor\r\n\ of\ this\ type.\r\n
comment26.params=name\ expectedType
comment26.target=void\ checkOneMutator(java.lang.String,\ java.lang.String)
comment26.text=\r\n\ Test\ class\ for\ a\ specific\ accessor\ for\ existance\ and\ type.\r\n\ @param\ name\ The\ expected\ name\ of\ the\ accessor.\r\n\ @param\ expectedType\ The\ expected\ parameter\ type\ of\ the\ accessor\r\n\ of\ this\ type.\r\n
comment27.params=expectedType
comment27.target=java.lang.Class\ getTypeClass(java.lang.String)
comment27.text=\r\n\ Turn\ a\ string\ class\ description\ into\ a\ class\ type.\r\n\ \r\n\ @param\ expectedType\ The\ string\ representation\ of\ a\ type.\r\n\ For\ example\ "int",\ "double",\ "java.lang.String",\ etc...\r\n\ \r\n\ @return\ Return\ the\ class\ definition\ of\ a\ string\ representation\r\n\ of\ a\ type.\r\n
comment28.params=expectedType
comment28.target=java.lang.Class\ getTypeArrayClass(java.lang.String)
comment28.text=\r\n\ Turn\ a\ string\ class\ description\ into\ a\ class\ array\ type\r\n\ if\ the\ string\ description\ contains\ [].\r\n\ \r\n\ Only\ works\ for\ 1d\ arrays.\r\n\ \r\n\ @param\ expectedType\ The\ string\ representation\ of\ a\ type\ array.\r\n\ For\ example\ "int[]",\ "double[]",\ "String[]",\ etc...\r\n\ \r\n\ @return\ Return\ the\ array\ class\ definition\ of\ a\ string\ \r\n\ representation\ of\ a\ type.\r\n
comment29.params=
comment29.target=void\ checkAMOperation()
comment29.text=\r\n\ Check\ the\ accessor\ mutator\ operation\ for\ all\ fields.\r\n
comment3.params=
comment3.target=void\ checkClass()
comment3.text=\r\n\ Check\ that\ the\ class\ is\ properly\ named.\r\n
comment30.params=fieldName\ enumType
comment30.target=void\ checkAMOEnum(java.lang.String,\ java.lang.String)
comment30.text=\r\n\ Check\ the\ accessor\ and\ mutator\ for\ an\ enum\ type.\r\n\ @param\ fieldName\ The\ field\ name\ of\ the\ enum.\r\n\ @param\ enumType\ The\ name\ of\ the\ enum.\r\n
comment31.params=
comment31.target=java.lang.String\ getRandomString()
comment31.text=\r\n\ Creates\ and\ returns\ a\ random\ length\ string\ of\ random\r\n\ characters.\r\n\ @return\ Returns\ a\ random\ length\ string\ of\ random\r\n\ characters.\r\n
comment32.params=fieldName
comment32.target=void\ checkAMOString(java.lang.String)
comment32.text=\r\n\ This\ method\ only\ works\ for\ string\ fields.\r\n\ This\ method\ simply\ sets\ the\ field\ using\ the\ mutator\ then\ reads\r\n\ the\ field\ using\ the\ accessor\ and\ makes\ sure\ the\ two\ are\ the\ same.\r\n\ @param\ fieldName\ The\ name\ of\ the\ string\ field.\r\n
comment33.params=fieldName\ good
comment33.target=void\ checkAMOStringLimit(java.lang.String,\ java.lang.String[])
comment33.text=\r\n\ This\ method\ only\ works\ for\ string\ fields.\r\n\ This\ method\ simply\ sets\ the\ field\ using\ the\ mutator\ then\ reads\r\n\ the\ field\ using\ the\ accessor\ and\ makes\ sure\ the\ two\ are\ the\ same.\r\n\ @param\ fieldName\ The\ name\ of\ the\ string\ field.\r\n\ @param\ good\ An\ array\ of\ good\ strings.\r\n
comment34.params=fieldName
comment34.target=void\ checkAMOInt(java.lang.String)
comment34.text=\r\n\ Check\ integer\ accessor\ and\ mutator.\r\n\ @param\ fieldName\ This\ is\ the\ name\ of\ the\ field\ that\r\n\ will\ have\ its\ accessors\ and\ mutators\ checked.\r\n
comment35.params=fieldName\ min\ max
comment35.target=void\ checkAMOIntLimit(java.lang.String,\ int,\ int)
comment35.text=\r\n\ Check\ of\ accessor\ and\ mutator\ with\ limits.\r\n\ @param\ fieldName\ This\ is\ the\ name\ of\ the\ field\ that\r\n\ will\ have\ its\ accessors\ and\ mutators\ checked.\r\n\ @param\ min\ The\ lower\ limit\ to\ check.\r\n\ @param\ max\ The\ upper\ limit\ to\ check.\r\n
comment36.params=fieldName
comment36.target=void\ checkAMODouble(java.lang.String)
comment36.text=\r\n\ Check\ integer\ accessor\ and\ mutator.\r\n\ @param\ fieldName\ This\ is\ the\ name\ of\ the\ field\ that\r\n\ will\ have\ its\ accessors\ and\ mutators\ checked.\r\n
comment37.params=fieldName\ min\ max
comment37.target=void\ checkAMODoubleLimit(java.lang.String,\ double,\ double)
comment37.text=\r\n\ Check\ of\ accessor\ and\ mutator\ with\ limits.\r\n\ @param\ fieldName\ This\ is\ the\ name\ of\ the\ field\ that\r\n\ will\ have\ its\ accessors\ and\ mutators\ checked.\r\n\ @param\ min\ The\ lower\ limit\ to\ check.\r\n\ @param\ max\ The\ upper\ limit\ to\ check.\r\n
comment38.params=grade
comment38.target=void\ printGrade(int)
comment38.text=\r\n\ Store\ the\ grade\ then\ print\ the\ report.\ \ The\ report\ only\r\n\ prints\ after\ a\ fail.\ \ So\ this\ is\ the\ final\ grade.\r\n\ @param\ grade\ The\ grade\ for\ failing\ at\ this\ point.\r\n
comment39.params=
comment39.target=java.lang.String\ gradeReport()
comment39.text=\r\n\ Creates\ a\ string\ with\ the\ grades\ for\ output.\r\n\ @return\ Returns\ the\ grade\ report\ as\ a\ string\ for\ use\r\n\ elsewhere.\r\n
comment4.params=
comment4.target=void\ checkInterface()
comment4.text=\r\n\ Check\ that\ the\ interface\ is\ properly\ named.\r\n
comment5.params=
comment5.target=void\ checkAbstractClass()
comment5.text=\r\n\ Check\ that\ the\ class\ is\ properly\ named\ and\ abstract.\r\n
comment6.params=className
comment6.target=java.lang.Class\ getClass(java.lang.String)
comment6.text=\r\n\ Get\ the\ class\ from\ the\ given\ class\ name.\ \ \r\n\ @param\ className\ String\ name\ of\ the\ class\ to\ find.\r\n\ @return\ Returns\ the\ class\ if\ found.\ Returns\ null\ \r\n\ otherwise.\r\n
comment7.params=expectedLowBound\ expectedHighBound
comment7.target=void\ checkMethodNumber(int,\ int)
comment7.text=\r\n\ Verify\ a\ specific\ number\ of\ methods\ exist\ in\ this\ class.\r\n\ @param\ expectedLowBound\ The\ minimum\ number\ of\ methods\ allowed.\r\n\ @param\ expectedHighBound\ The\ maximum\ number\ of\ methods\ allowed.\r\n
comment8.params=values
comment8.target=void\ checkEnum(java.lang.String[])
comment8.text=\r\n\ Check\ that\ the\ class\ is\ properly\ named.\r\n\ @param\ values\ A\ list\ of\ enum\ values\ to\ check\ for\ \r\n\ presence\ in\ the\ enum\r\n
comment9.params=parent
comment9.target=void\ checkParentClass(java.lang.String)
comment9.text=\r\n\ Check\ for\ proper\ parent\ class.\r\n\ @param\ parent\ Check\ that\ this\ is\ the\ actual\r\n\ parent\ of\ the\ testing\ class.\r\n
numComments=40
